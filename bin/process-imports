#!/bin/sh -x

############################################################################
# set up base environment
############################################################################

PATH=/bin:/usr/bin:/usr/local/bin
UNRAR=/usr/local/bin/unrar
BINDIR=`dirname $0`
REQDIR=$1
COUNT=$2
REQUEST_ID="`date +%Y%m%d`-$((COUNT+1))-`date +%H%M`"
IFS='
'

ATTACHDIR="${REQDIR}/${REQUEST_ID}/attachments"
LICENSE_TOOL="${BINDIR}/getSystemLicense"
PARTNER_TOOL="${BINDIR}/partners_lic_manager"
SMTP_CLIENT=msmtp
REPLY_SENDER="\"VIVIPOS License Service\""
REPLY_REPLY_TO="license-service-noreply@vivipos.com.tw"
REPLY_SUBJECT="License import request status"

SDK_PARTNER_ID="VIVIPOS SDK"

STUB_IMPORT_COUNT=0
LICENSE_IMPORT_COUNT=0

STUB_REJECT_COUNT=0
LICENSE_REJECT_COUNT=0

SUCCESSDIR="${REQDIR}/${REQUEST_ID}/success"
FAILDIR="${REQDIR}/${REQUEST_ID}/fail"

POST_SCRIPT="${BINDIR}/updateRequest.php"


############################################################################
#
# validate_stub
#
# validate stub file
#
# @args: <order number> <MB serial number> <stub file> <terminal key>
#
############################################################################

validate_stub()
{
    local ORDER=$1
    local SERIAL=$2
    local STUB=$3
    local KEY=$4

    if [ -z "${ORDER}" ]; then
	REASON="Order number is invalid or empty"
	return 1
    else
	local PREFIX=`echo -n ${ORDER} | awk -F"-" '{print $1}'`
	if [ "${PREFIX}" != "C220" -a "${PREFIX}" != "S220" -a "${PREFIX}" != "B220" -a "${PREFIX}" != "V220" -a "${PREFIX}" != "S221" -a "${PREFIX}" != "C221" -a "${PREFIX}" != "V221" -a "${PREFIX}" != "B221" -a "${PREFIX}" != "VM" -a "${PREFIX}" != "TR" -a "${PREFIX}" != "RMA" ]; then
	    REASON="Invalid order number"
	    return 1
	fi
    fi

    if [ "${PREFIX}" = "RMA" ]; then
	SQL="SELECT concat(Licenses.order_number, ',', Licenses.serial_number, ',', Terminals.model) FROM Licenses, Terminals WHERE Terminals.serial_number = '${SERIAL}' AND Licenses.terminal_stub = Terminals.terminal_stub"
	RMA_INFO=`echo "$SQL" | mysql -N Licenses`

	if [ -z "${RMA_INFO}" ]; then
	    REASON="RMA Terminal or License not found"
	    return 1
	fi
    fi

    if [ \( "${PREFIX}" = "VM" -o "{PREFIX}" = "RMA" \) -a -z "${SERIAL}" ]; then
	REASON="Serial number is empty for non-VM license"
	return 1
    fi

    if [ "${SERIAL}" = "license_stub" ]; then
	REASON="Invalid hardware serial number"
	return 1
    fi

    local STUB_LEN=`echo -n ${STUB} | wc -c`
    if [ ${STUB_LEN} -ne 128 ]; then
	REASON="Terminal stub length is not 128 bytes (${STUB_LEN})"
	return 1
    fi

    KEY_LEN=`echo -n ${KEY} | wc -c`
    if [ ${KEY_LEN} -ne 128 ]; then
	REASON="License key length is not 128 bytes (${KEY_LEN})"
	return 1
    fi

    return 0
}

############################################################################
#
# store_stub
#
# store terminal stub/license in db
#
# @args: <stub file>
#
############################################################################

store_stub() {

    local ORDER=$ORDER_NO
    local SW_SERIAL=$SOFTWARE_SERIAL
    local HW_MODEL=$MODEL

    # do not update MODEL if new value is empty
    local UPDATE_MODEL_CLAUSE=""
    if [ -n "${MODEL}" ]; then
	UPDATE_MODEL_CLAUSE="model=VALUES(model), "
    fi

    # do not update license serial number if new value is empty
    local UPDATE_SERIAL_NUMBER_CLAUSE=""
    if [ -n "${SOFTWARE_SERIAL}" ]; then
	UPDATE_SERIAL_CLAUSE="serial_number=VALUES(serial_number), "
    fi

    if [ "${ORDER_NO}" = "RMA" ]; then
	# mark existing Terminal and License entries as RMA
	cat  <<EOF-${REQUEST_ID} | mysql Licenses
BEGIN;
UPDATE Licenses
    SET license_key = concat('RMA-', license_key, '-${REQUEST_ID}')
    WHERE terminal_stub = (SELECT terminal_stub FROM Terminals where serial_number = '${HARDWARE_SERIAL}');

UPDATE Terminals
    SET serial_number = concat('RMA-', serial_number, '-${REQUEST_ID}')
    WHERE serial_number = '${HARDWARE_SERIAL}';

COMMIT;
EOF-${REQUEST_ID}

	if [ $? -ne 0 ]; then
	    REASON="Failed to mark existing Terminal and License as RMA ($?)"
	    return 1
	fi

	# retrieve Order Number, Software Serial Number, and Hardware Model
	ORDER=`echo "${RMA_INFO}" | awk -F"," '{print $1}'`
	SW_SERIAL=`echo "${RMA_INFO}" | awk -F"," '{print $2}'`
	HW_MODEL=`echo "${RMA_INFO}" | awk -F"," '{print $3}'`
    fi

    # insert entry into Terminals & Licenses, and update requests
    cat  <<EOF-${REQUEST_ID} | mysql Licenses
BEGIN;

INSERT into Terminals(terminal_stub, serial_number, dallas_key, system_name, vendor_name, mac_address, model, created_by, created, import_request_id, signed_by)
    values ('${license_stub}', '${HARDWARE_SERIAL}', '${dallas}', '${system_name}', '${vendor_name}', '${mac_address}', '${HW_MODEL}', '${REQ_TO}', NOW(), '${REQUEST_ID}', '${SENDER}')
    ON DUPLICATE KEY UPDATE ${UPDATE_MODEL_CLAUSE} serial_number=VALUES(serial_number), created_by=VALUES(created_by), import_request_id=VALUES(import_request_id), signed_by=VALUES(signed_by), update_count=update_count+1;

INSERT into Licenses(terminal_stub, partner_id, license_key, expire_date, serial_number, order_number, signed_by, created_by, created, import_request_id)
    values ('${license_stub}', '${SDK_PARTNER_ID}', '${KEY}', 0, '${SW_SERIAL}', '${ORDER}', '${SENDER}', '${REQ_TO}', NOW(), '${REQUEST_ID}')
    ON DUPLICATE KEY UPDATE license_key=VALUES(license_key), expire_date=VALUES(expire_date), ${UPDATE_SERIAL_CLAUSE} order_number=VALUES(order_number), signed_by=VALUES(signed_by), created_by=VALUES(created_by), import_request_id='${REQUEST_ID}', update_count=update_count+1;

COMMIT;
EOF-${REQUEST_ID}

    if [ $? -ne 0 ]; then
        REASON="Failed to store stub into database ($?)"
        return 1
    fi
}

############################################################################
#
# process_stub
#
# process a stub file
#
# @args: <stub file>
#
############################################################################

process_stub() {

    local stub=$1

    # for each stub file, file name is <hardware serial number>[-<software serial number>]

    local BASE_NAME=`basename "${stub}" .txt`
    HARDWARE_SERIAL=`echo $BASE_NAME | awk -F- '{print $1}'`
    SOFTWARE_SERIAL=`echo $BASE_NAME | awk -F- '{print $2}'`

    # import stub details into environment
    eval `awk -F"=" '$1 ~ /^[A-Za-z0-9_]+$/ { print "export " $1 "=\"" $2 "\"";  }' "${stub}"`

    # strip out leading and trailing spaces
    license_stub=`echo -n ${license_stub} | sed -e 's/^[^a-f0-9]*//g;s/[^a-f0-9]$//g'`

    # generate license key
    KEY=`${LICENSE_TOOL} -f "${stub}"`

    # log output
    cat > "${REQDIR}/${REQUEST_ID}/stub-${HARDWARE_SERIAL}" <<EOF-${REQUEST_ID}
ORDER_NO=${ORDER_NO}
HARDWARE_SERIAL_NUMBER=${HARDWARE_SERIAL}
DALLAS_KEY=${dallas}
SYSTEM_NAME=${system_name}
VENDOR_NAME=${vendor_name}
MAC_ADDRESS=${mac_address}
TERMINAL_STUB=${license_stub}
SDK_LICENSE_KEY=${KEY}
SOFTWARE_SERIAL_NUMBER=${SOFTWARE_SERIAL}
EOF-${REQUEST_ID}

    # are data valid?
    validate_stub "${ORDER_NO}" "${HARDWARE_SERIAL}" "${license_stub}" "${KEY}"
    if [ "$?" -ne 0 ]; then
        echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <STUB> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
        mv "${REQDIR}/${REQUEST_ID}/stub-${HARDWARE_SERIAL}" "${FAILDIR}/stub-${HARDWARE_SERIAL}"
        STUB_REJECT_COUNT=$((STUB_REJECT_COUNT+1))
        return 1
    else

        # attempt to insert into DB
        store_stub
        if [ "$?" -ne 0 ]; then
            echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <STUB> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            mv "${REQDIR}/${REQUEST_ID}/stub-${HARDWARE_SERIAL}" "${FAILDIR}/stub-${HARDWARE_SERIAL}"
            STUB_REJECT_COUNT=$((STUB_REJECT_COUNT+1))
            return 1
        else
            echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <STUB>" >> "${REQDIR}/${REQUEST_ID}/imported.log"
            mv "${REQDIR}/${REQUEST_ID}/stub-${HARDWARE_SERIAL}" "${SUCCESSDIR}/stub-${HARDWARE_SERIAL}"
            STUB_IMPORT_COUNT=$((STUB_IMPORT_COUNT+1))
        fi

    fi
}

############################################################################
#
# validate_license
#
# validate partner license file
#
# @args: <partner id> <partner key>
#
############################################################################

validate_license() {
    local PARTNER_ID=$1
    local PARTNER_KEY=$2

    if [ -z "${PARTNER_ID}" ]; then
	REASON="Partner ID is empty"
	return 1
    fi

    if [ -z "${PARTNER_KEY}" ]; then
	REASON="Partner key is empty"
	return 1
    fi

    local KEY_LEN=`echo -n "${PARTNER_KEY}" | wc -c`
    if [ ${KEY_LEN} -ne 76 ]; then
	REASON="License key length is not 76 bytes (${KEY_LEN})"
	return 1
    fi

    return 0
}

############################################################################
#
# store_license
#
# store partner license in db
#
# @args: <terminal stub> <order number> <partner id> <partner key> <expire date>
#
############################################################################

store_license() {
    local TERMINAL_STUB=$1
    local ORDER_NO=$2
    local PARTNER_ID=$3
    local PARTNER_KEY=$4
    local EXPIRE_DATE=$5

    # check if partner ID exists
    SQL="select count(*) from Partners where partner_id='${PARTNER_ID}'"
    COUNT=`echo "$SQL" | mysql -N Licenses`

    if [ $? -ne 0 ]; then
        REASON="Failed to retrieve partner information"
        return 1
    else
        if [ "$COUNT" = "1" ]; then

# insert entry into Licenses
cat <<EOF-${REQUEST_ID} | mysql -N Licenses
INSERT into Licenses(terminal_stub, partner_id, license_key, expire_date, order_number, signed_by, created_by, created, import_request_id)
values ('${TERMINAL_STUB}', '${PARTNER_ID}', '${PARTNER_KEY}', '${EXPIRE_DATE}', '${ORDER_NO}', '${SENDER}', '${REQ_TO}', NOW(), '${REQUEST_ID}')
ON DUPLICATE KEY UPDATE license_key=VALUES(license_key), expire_date=VALUES(expire_date), order_number=VALUES(order_number), signed_by=VALUES(signed_by), created_by=VALUES(created_by), import_request_id='${REQUEST_ID}', update_count=update_count+1;
EOF-${REQUEST_ID}

            if [ $? -ne 0 ]; then
                REASON="Failed to store stub into database ($?)"
                return 1
            fi

        elif [ "$COUNT" = "0" ]; then
            REASON="Partner ID does not exist in database"
            return 1
        else
            REASON="Multiple entries with the same partner ID found"
            return 1
        fi
    fi
}

############################################################################
#
# process_license
#
# process partner license file
#
# @args: <partner license file>
#
############################################################################

process_license() {

    local LICENSE_FILE=$1

    LICENSES=`sed -n '
		# extract partner ID
		/^\[.*\]/, /^signed_key=/ {
		    /^\[.*\]/ {
			s/^\[\(.*\)\]/\1/;h
		    }
		    /^signed_key=/!d
		    /^signed_key=/ {
			s/^signed_key\(.*\)/\1/
			H
			g
			s/^\(.*\)\n\(.*\)$/\1\2/
			p
		    }
		}
		' < "${LICENSE_FILE}"`

    for license in ${LICENSES}; do
	PARTNER_ID=`echo "${license}" | sed -n 's/^\([^=]*\)=.*$/\1/;p'`
	PARTNER_KEY=`echo "${license}" | sed -n 's/^[^=]*=\(.*$\)/\1/;p'`

	# are data valid?
	validate_license "${PARTNER_ID}" "${PARTNER_KEY}"
	if [ "$?" -ne 0 ]; then
	    echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))

	    echo "[${PARTNER_ID}]" >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    echo "signed_key=${PARTNER_KEY}" >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    echo >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	else

	    # extract expire date
	    EXPIRE_DATE=`${PARTNER_TOOL} -c "${LICENSE_FILE}" -l | grep -E -e "^${PARTNER_ID}[[:space:]]" | awk -F" " '{print $2}'`

	    # attempt to insert into DB
	    store_license "${license_stub}" "${ORDER_NO}" "${PARTNER_ID}" "${PARTNER_KEY}" "${EXPIRE_DATE}"
	    if [ "$?" -ne 0 ]; then
		echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
                LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))

		echo "[${PARTNER_ID}]" >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo "signed_key=${PARTNER_KEY}" >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo >> "${FAILDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    else
		echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}>" >> "${REQDIR}/${REQUEST_ID}/imported.log"
                LICENSE_IMPORT_COUNT=$((LICENSE_IMPORT_COUNT+1))

		echo "[${PARTNER_ID}]" >> "${SUCCESSDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo "signed_key=${PARTNER_KEY}" >> "${SUCCESSDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo >> "${SUCCESSDIR}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    fi
	fi
    done
}

############################################################################
#
# main
#
############################################################################

############################################################################
# saving request
############################################################################
mkdir -p "${ATTACHDIR}"
mkdir -p "${SUCCESSDIR}"
mkdir -p "${FAILDIR}"
env > "${REQDIR}/${REQUEST_ID}/env"
cat > "${REQDIR}/${REQUEST_ID}/req"

############################################################################
# extract email headers and content
############################################################################
sed -n -e '1,/^$/ { /^[^[:space:]]/ { x; p; }; /^[[:space:]]/ { x; G; s/\n//; h; }; /^$/ { g; p; } }; /^$/,$d' < "${REQDIR}/${REQUEST_ID}/req" > "${REQDIR}/${REQUEST_ID}/req-headers"
REQ_SUBJECT=`grep -E -e '^Subject: ' "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_TO=`grep -E -m 1 -e "^Delivered-To: " "${REQDIR}/${REQUEST_ID}/req-headers" | awk -F" " '{print $2}'`
REQ_DATE=`grep -E -m 1 -e "^Date: " "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_BODY=`sed '1,/^$/d' "${REQDIR}/${REQUEST_ID}/req"`
REQ_CONTENT_TYPE=`grep -E -m 1 -e "^Content-Type: " "${REQDIR}/${REQUEST_ID}/req-headers"`

############################################################################
# extract multipart boundary
############################################################################
REQ_MULTIPART_BOUNDARY=`echo ${REQ_CONTENT_TYPE} | sed -n '/^Content-Type: multipart\/mixed; / {
s_.*boundary=\(.*\)_\1_
p
}'`
RES_MULTIPART_BOUNDARY=`uuid`

############################################################################
# extract sender from request
############################################################################
SENDER=`sed '/^Reply-To:/q; /^From:/h; /./d;g;q' "${REQDIR}/${REQUEST_ID}/req" | sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'`
if [ -z "${SENDER}" ]; then
    SENDER=${FROM}
fi

############################################################################
# extract attachments
############################################################################
ripmime -i "${REQDIR}/${REQUEST_ID}/req" -d "${ATTACHDIR}" --no-nameless

############################################################################
# begin processing RAR attachments
############################################################################
for f in `find ${ATTACHDIR} -name \*.rar`; do

    # for RAR, file name is <order number>[ model[#n]]
    FILE_NAME=`basename "$f" .rar`
    ORDER_NO=`echo "${FILE_NAME}" | awk '{print $1}'`
    MODEL=`echo "${FILE_NAME}" | awk '{print $2}' | sed 's/#[^#]*$//'`

    # extract stub files into temp folder
    mkdir "${ATTACHDIR}/${ORDER_NO}"
    ${UNRAR} x -y "$f" "${ATTACHDIR}/${ORDER_NO}"

    for stub in `find "${ATTACHDIR}/${ORDER_NO}" -name \*.txt`; do
        process_stub "${stub}"

        STUB_RESULT=$?

        # processing corresponding LIC attachments (partner licenses)
        LICENSE_FILE=`echo "${stub}" | sed 's/.txt$/.lic/'`
        if [ -f "${LICENSE_FILE}" ]; then
            if [ ${STUB_RESULT} -ne 0 ]; then
                echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> REASON <Processing of terminal stub failed>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
                LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))
            else
                process_license "${LICENSE_FILE}"
            fi
        fi
    done

done

############################################################################
# begin processing TXT attachments (
############################################################################
for stub in `find ${ATTACHDIR} -maxdepth 1 -name \*.txt`; do

    # for TXT, order number should be in the subject line
    SUBJECT_LINE=`echo "${REQ_SUBJECT}" | grep -E -m 1 -e "^Subject: [ \t]*((B220|C220|V220|S220|B221|C221|V221|S221|VM|TR|RMA)-[[:alnum:]]+|RMA)"`
    ORDER_NO=`echo "${SUBJECT_LINE}" | awk '{print $2}'`
    MODEL=`echo "${SUBJECT_LINE}" | awk '{print $3}' | sed 's/#[^#]*$//'`

    process_stub "${stub}"

    STUB_RESULT=$?

    # processing corresponding LIC attachments (partner licenses)
    LICENSE_FILE=`echo "${stub}" | sed 's/.txt$/.lic/'`
    if [ -f "${LICENSE_FILE}" ]; then
        if [ ${STUB_RESULT} -ne 0 ]; then
            echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> REASON <Processing of terminal stub failed>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
        else
            process_license "${LICENSE_FILE}"
        fi
    fi
done


############################################################################
# prepare response
############################################################################
cat > "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
From: ${REPLY_SENDER}
To: ${SENDER}
Subject: ${REPLY_SUBJECT} [ID: ${REQUEST_ID}]
Reply-To: ${REPLY_REPLY_TO}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

We have received and processed your license import request.
Your request has been assigned the following ID:

    ${REQUEST_ID}

Results from your request:

EOF-${REQUEST_ID}

if [ -f "${REQDIR}/${REQUEST_ID}/imported.log" ]; then

    echo "[LICENSE(S) IMPORTED]" >> "${REQDIR}/${REQUEST_ID}/response"

cat <<EOF-${REQUEST_ID} | mysql -N Licenses >> "${REQDIR}/${REQUEST_ID}/response" 
SELECT l.order_number, t.serial_number, t.model, l.partner_id, l.serial_number, l.signed_by, FROM_UNIXTIME( l.expire_date )
FROM Licenses l, Terminals t
WHERE t.terminal_stub = l.terminal_stub AND l.import_request_id = '${REQUEST_ID}'
ORDER BY l.order_number, t.serial_number, l.partner_id, l.serial_number
LIMIT 0 , 300
EOF-${REQUEST_ID}
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"

    echo "[IMPORT LOG]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/imported.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo "TOTAL: $((STUB_IMPORT_COUNT + LICENSE_IMPORT_COUNT)), STUBS: ${STUB_IMPORT_COUNT}, PARTNER LICENSES: ${LICENSE_IMPORT_COUNT}" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"

    php5 "${POST_SCRIPT}" "${REQUEST_ID}"
fi

if [ -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "[REJECTED LOG]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/rejected.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo "TOTAL: $((STUB_REJECT_COUNT + LICENSE_REJECT_COUNT)), STUBS: ${STUB_REJECT_COUNT}, PARTNER LICENSES: ${LICENSE_REJECT_COUNT}" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ ! -f "${REQDIR}/${REQUEST_ID}/imported.log" -a ! -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "-- No valid license file found --" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi
echo "Yours Sincerely," >> "${REQDIR}/${REQUEST_ID}/response"
echo "VIVIPOS License Service" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"

############################################################################
# include original email
############################################################################
cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
--${RES_MULTIPART_BOUNDARY}
Content-Type: message/rfc822

EOF-${REQUEST_ID}
cat "${REQDIR}/${REQUEST_ID}/req" >> "${REQDIR}/${REQUEST_ID}/response"
echo "--${RES_MULTIPART_BOUNDARY}--" >> "${REQDIR}/${REQUEST_ID}/response"

############################################################################
# email response
############################################################################
${SMTP_CLIENT} -t < "${REQDIR}/${REQUEST_ID}/response" > "${REQDIR}/${REQUEST_ID}/response.log" 2>&1
if [ "$?" -ne 0 ]; then
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.unsent"
else
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.sent"
fi

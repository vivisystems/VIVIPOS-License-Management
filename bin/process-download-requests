#!/bin/sh -x

############################################################################
# set up base environment
############################################################################

PATH=/bin:/usr/bin:/usr/local/bin
BINDIR=`dirname $0`
REQDIR=$1
COUNT=$2
REQUEST_ID="`date +%Y%m%d`-$((COUNT+1))-`date +%H%M`"
IFS='
'

ATTACHDIR="${REQDIR}/${REQUEST_ID}/attachments"
SMTP_CLIENT=msmtp
REPLY_SENDER="VIVIPOS License Service"
REPLY_REPLY_TO="license-service-noreply@vivipos.com.tw"
REPLY_SUBJECT="License download request status"

TENDER_FORWARD_ADDRESS="tender+cb350522af7fc8238b8ec6268087eaf884ce2cd27@tenderapp.com"

SDK_PARTNER_ID="VIVIPOS SDK"

LICENSEDIR="${REQDIR}/${REQUEST_ID}/licenses"
SUCCESSDIR="${REQDIR}/${REQUEST_ID}/success"
FAILDIR="${REQDIR}/${REQUEST_ID}/fail"


############################################################################
#
# process_stub
#
# process a stub file
#
# @args: <stub file>
#
############################################################################

process_stub() {

    local stub=$1

    # for each stub file, generate corresponding SDK key and partner license key files
    local BASE_NAME=`basename "${stub}" .txt | sed -e 's/\.[^\.]*//'`
    local SDK_KEY_FILE="${BASE_NAME}.lic"
    local PARTNER_KEY_FILE="${BASE_NAME}_partner.lic"

    local ERROR_FLAG=0

    # import stub details into environment
    license_stub=
    eval `awk -F"=" '$1 ~ /^[A-Za-z0-9_]+$/ { print "export " $1 "=\"" $2 "\"";  }' "${stub}"`

    local request_from_license_helper=0

    # if X-Message-ID is present, update Request
    if [ -n "${REQ_X_MESSAGE_ID}" ]; then

	cat <<EOF-${REQUEST_ID} | mysql -N Licenses
UPDATE Requests
    SET request_id = '${REQUEST_ID}'
    WHERE request_id = '${REQ_X_MESSAGE_ID}'
EOF-${REQUEST_ID}

	# test if request exists
	if [ "$?" -eq 0 ]; then
	    request_from_license_helper=`cat <<EOF-${REQUEST_ID} | mysql -N Licenses
SELECT COUNT(*)
FROM Requests
WHERE request_id = '${REQUEST_ID}'
EOF-${REQUEST_ID}`

	    if [ "$?" -ne 0 ]; then
		request_from_license_helper=0
	    fi
	fi
    fi

    # test if license stub is present
    if [ -z "${license_stub}" ]; then
        ERROR_FLAG=1
        echo "FILE <${BASE_NAME}> TYPE <SDK> REASON <Not a valid terminal stub file>" >> "${REQDIR}/${REQUEST_ID}/failed.log"
    else

	# retrieve SDK license key
	local SQL="select license_key FROM Licenses where terminal_stub='${license_stub}' and partner_id='${SDK_PARTNER_ID}' limit 1"
	local LICENSE_KEY=`echo "${SQL}" | mysql -N Licenses`

	if [ "$?" -ne 0 ]; then
	    ERROR_FLAG=1
	    echo "FILE <${BASE_NAME}> TYPE <SDK> REASON <Database error while retrieving SDK license>" >> "${REQDIR}/${REQUEST_ID}/failed.log"
	elif [ -z "${LICENSE_KEY}" ]; then
	    ERROR_FLAG=1
	    echo "FILE <${BASE_NAME}> TYPE <SDK> REASON <SDK license not found>" >> "${REQDIR}/${REQUEST_ID}/failed.log"

	    if [ "${request_from_license_helper}" -eq 0 ]; then

		# open request exists for this stub?
		local open_request_exists=`cat <<EOF-${REQUEST_ID} | mysql -N Licenses
SELECT COUNT(*)
FROM Requests
WHERE terminal_stub = '${license_stub}'
EOF-${REQUEST_ID}`

		if [ "$?" -eq 0 -a ${open_request_exists} -eq = 0 ]; then
		    # record license request
		    cat <<EOF-${REQUEST_ID} | mysql -N Licenses
INSERT into Requests(request_id, customer_name, email, dallas_key, system_name, mac_address, vendor_name, terminal_stub, status, created_on, created_by)
    values('${REQUEST_ID}', '${SENDER}', '${SENDER}', '${dallas}', '${system_name}', '${mac_address}', '${vendor_name}', '${license_stub}', 0, NOW(), '${REQ_TO}')
EOF-${REQUEST_ID}
		else
		    ERROR_FLAG=1
		    echo "FILE <${BASE_NAME}> TYPE <SDK> REASON <License request for this terminal already pending>" >> "${REQDIR}/${REQUEST_ID}/failed.log"
		fi

	    fi

	else
	    echo -n "${LICENSE_KEY}" > "${LICENSEDIR}/${SDK_KEY_FILE}"
	    echo "FILE <${BASE_NAME}> TYPE <SDK>" >> "${REQDIR}/${REQUEST_ID}/download.log"

	    # record download request
cat <<EOF-${REQUEST_ID} | mysql -N Licenses
INSERT into Downloads(terminal_stub, partner_id, ip_address, sdk_version, app_version, os_version, license_helper_version, download_request_id, created, created_by)
    values('${license_stub}', '${SDK_PARTNER_ID}', '${SENDER}', NULL, NULL, NULL, NULL, '${REQUEST_ID}', NOW(), '${REQ_TO}')
EOF-${REQUEST_ID}

	fi

	# retrieve partner license key(s)
	local LICENSES=`cat <<EOF-${REQUEST_ID} | mysql -N Licenses
SELECT p.partner_id, p.name, p.email, l.license_key
FROM Partners p, Licenses l
WHERE l.terminal_stub = '${license_stub}'
AND l.partner_id != '${SDK_PARTNER_ID}'
AND l.partner_id = p.partner_id
EOF-${REQUEST_ID}`

	if [ "$?" -ne 0 ]; then
	    ERROR_FLAG=1
	    echo "FILE <${BASE_NAME}> TYPE <PARTNER> REASON <Database error while retrieving partner licenses>" >> "${REQDIR}/${REQUEST_ID}/failed.log"
	elif [ -n "${LICENSES}" ]; then
	    echo "${LICENSES}" | awk -F"\t" '{ printf "[%s]\nname=%s\nemail=%s\nsigned_key=%s\n\n", $1, $2, $3, $4 }' > "${LICENSEDIR}/${PARTNER_KEY_FILE}"
	    echo "${LICENSES}" | awk -F"\t" "{ printf \"FILE <${BASE_NAME}> TYPE <PARTNER> PARTNER <%s> NAME <%s>\n\",\$1, \$2 }" >> "${REQDIR}/${REQUEST_ID}/download.log"

	    # record download request
	    for l in ${LICENSES}; do
		local L_PARTNER_ID=`echo "${l}" | awk -F"\t" '{ print $1 }'`

		cat <<EOF-${REQUEST_ID} | mysql -N Licenses
INSERT into Downloads(terminal_stub, partner_id, ip_address, sdk_version, app_version, license_helper_version, download_request_id, created, created_by)
    values('${license_stub}', '${L_PARTNER_ID}', '${SENDER}', NULL, NULL, NULL, '${REQUEST_ID}', NOW(), '${REQ_TO}')
EOF-${REQUEST_ID}
	    done
	fi
    fi

    if [ $ERROR_FLAG -eq 0 ]; then
        cp "${stub}" "${SUCCESSDIR}"
    else
        cp "${stub}" "${FAILDIR}"
    fi
}


############################################################################
#
# generate forward response
#
############################################################################

forward() {

    local OUTPUT_FILE=$1

    cat > "${OUTPUT_FILE}" << EOF-${REQUEST_ID}
From: ${SENDER}
To: ${TENDER_FORWARD_ADDRESS}
Subject: ${REQ_SUBJECT_CONTENT} [ID: ${REQUEST_ID}]
Reply-To: ${SENDER}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

Request received via ${REQ_TO}

--------------- Original Request ---------------

--${RES_MULTIPART_BOUNDARY}
EOF-${REQUEST_ID}

    if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
        echo "${REQ_CONTENT_TYPE}" >> "${OUTPUT_FILE}"
        echo >> "${OUTPUT_FILE}"
    fi

    cat >> "${OUTPUT_FILE}" <<EOF-${REQUEST_ID}
${REQ_BODY}
EOF-${REQUEST_ID}

}


############################################################################
#
# generate reject response
#
############################################################################

reject() {

    local OUTPUT_FILE=$1

    cat > "${OUTPUT_FILE}" << EOF-${REQUEST_ID}
From: ${REPLY_SENDER}
To: ${SENDER}
Subject: Re:${REQ_SUBJECT_CONTENT}
Reply-To: ${REPLY_REPLY_TO}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

There does not appear to be any stub files attached to the request. Please
submit a new request with the proper stub file(s) attached.

Yours sincerely,

VIVIPOS Support

--------------- Original Request ---------------

--${RES_MULTIPART_BOUNDARY}
EOF-${REQUEST_ID}

    if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
        echo "${REQ_CONTENT_TYPE}" >> "${OUTPUT_FILE}"
        echo >> "${OUTPUT_FILE}"
    fi

    cat >> "${OUTPUT_FILE}" <<EOF-${REQUEST_ID}
${REQ_BODY}
EOF-${REQUEST_ID}

}


############################################################################
#
# send response
#
############################################################################

send() {

    local RESPONSE_FILE=$1

    "${SMTP_CLIENT}" -t < "${RESPONSE_FILE}" > "${RESPONSE_FILE}.log" 2>&1
    if [ "$?" -ne 0 ]; then
        mv "${RESPONSE_FILE}" "${RESPONSE_FILE}.unsent"
    else
        mv "${RESPONSE_FILE}" "${RESPONSE_FILE}.sent"
    fi

}


############################################################################
#
# main
#
############################################################################

############################################################################
# saving request
############################################################################
mkdir -p "${LICENSEDIR}"
mkdir -p "${SUCCESSDIR}"
mkdir -p "${FAILDIR}"
mkdir -p "${ATTACHDIR}"
env > "${REQDIR}/${REQUEST_ID}/env"
cat > "${REQDIR}/${REQUEST_ID}/req"

############################################################################
# extract email headers and content
############################################################################
sed -n -e '1,/^$/ { /^[^[:space:]]/ { x; p; }; /^[[:space:]]/ { x; G; s/\n//; h; }; /^$/ { g; p; } }; /^$/,$d' < "${REQDIR}/${REQUEST_ID}/req" > "${REQDIR}/${REQUEST_ID}/req-headers"
REQ_SUBJECT=`grep -E -e '^Subject: ' "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_SUBJECT_CONTENT=`echo "${REQ_SUBJECT}" | sed -e 's/^Subject:[[:space:]]*//'`
REQ_TO=`grep -E -m 1 -e "^Delivered-To: " "${REQDIR}/${REQUEST_ID}/req-headers" | awk -F" " '{print $2}'`
REQ_DATE=`grep -E -m 1 -e "^Date: " "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_BODY=`sed '1,/^$/d' "${REQDIR}/${REQUEST_ID}/req"`
REQ_CONTENT_TYPE=`grep -E -m 1 -e "^Content-Type: " "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_X_MESSAGE_ID=`grep -E -m 1 -e "^X-Message-ID: " "${REQDIR}/${REQUEST_ID}/req-headers" | sed 's/X-Message-ID: <\(.*\)>$/\1/p;d'`

############################################################################
# extract multipart boundary
############################################################################
REQ_MULTIPART_BOUNDARY=`echo ${REQ_CONTENT_TYPE} | sed -n '/^Content-Type: multipart\/mixed; / {
s_.*boundary=\(.*\)_\1_
p
}'`

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
    RES_MULTIPART_BOUNDARY=`uuid`
else
    RES_MULTIPART_BOUNDARY="${REQ_MULTIPART_BOUNDARY}"
fi

############################################################################
# extract sender from request
############################################################################
SENDER=`sed '/^Reply-To:/q; /^From:/h; /./d;g;q' "${REQDIR}/${REQUEST_ID}/req" | sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'`
if [ -z "${SENDER}" ]; then
    SENDER=${FROM}
fi

############################################################################
# extract attachments
############################################################################
ripmime -i "${REQDIR}/${REQUEST_ID}/req" -d "${ATTACHDIR}" --no-nameless

############################################################################
# uncompress RAR attachments first
############################################################################
for f in `find ${ATTACHDIR} -name \*.rar`; do

    local FILE_NAME=`basename "$f" .rar`

    # extract files into temp folder
    mkdir "${ATTACHDIR}/${FILE_NAME}"
    unrar x -y "$f" "${ATTACHDIR}/${FILE_NAME}"

done

############################################################################
# begin processing attachments
############################################################################
for stub in `find ${ATTACHDIR} -type f \! -name '*.rar'`; do

    process_stub "${stub}"

done

############################################################################
# forward request to Tender only if attachments are found
############################################################################
# licenses generated?
LICENSE_COUNT=`find "${LICENSEDIR}" -type f | wc -l`

# attachments successfully processed
SUCCESS_COUNT=`find "${SUCCESSDIR}" -type f | wc -l`

# attachments not successfully processed
FAIL_COUNT=`find "${FAILDIR}" -type f | wc -l`

if [ ${LICENSE_COUNT} -gt 0 -o ${SUCCESS_COUNT} -gt 0 -o ${FAIL_COUNT} -gt 0 ]; then
    forward "${REQDIR}/${REQUEST_ID}/forward"
    send "${REQDIR}/${REQUEST_ID}/forward"
else
    reject "${REQDIR}/${REQUEST_ID}/invalid"
    send "${REQDIR}/${REQUEST_ID}/invalid"
fi

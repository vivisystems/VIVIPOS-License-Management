#!/bin/sh -x

############################################################################
# set up base environment
############################################################################

PATH=/bin:/usr/bin:/usr/local/bin
REQDIR=$1
COUNT=$2
REQUEST_ID="`date +%Y%m%d`-$((COUNT+1))-`date +%H%M`"
IFS='
'

ATTACHDIR="${REQDIR}/${REQUEST_ID}/attachments"
SMTP_CLIENT=msmtp
REPLY_SENDER="\"VIVIPOS License Service\""
REPLY_REPLY_TO="license-service-noreply@vivipos.com.tw"
REPLY_SUBJECT="License revoke request status"

SDK_PARTNER_ID="VIVIPOS SDK"

STUB_REVOKE_COUNT=0
SDK_REVOKE_COUNT=0
LICENSE_REVOKE_COUNT=0

STUB_REJECT_COUNT=0
SDK_REJECT_COUNT=0
LICENSE_REJECT_COUNT=0

SUCCESSDIR="${REQDIR}/${REQUEST_ID}/success"
FAILDIR="${REQDIR}/${REQUEST_ID}/fail"


############################################################################
#
# revoke_stub
#
# revoke license identified by its stub file
#
# @args: <stub file>
#
############################################################################

revoke_stub() {

    local stub=$1
    local FILE_NAME=`basename "${stub}"`

    # import stub details into environment
    eval `awk -F"=" '$1 ~ /^[A-Za-z0-9_]+$/ { print "export " $1 "=\"" $2 "\"";  }' "${stub}"`

    # check if stub exists
    SQL="select count(*) from Licenses where terminal_stub='${license_stub}' and partner_id='${SDK_PARTNER_ID}'"
    COUNT=`echo "${SQL}" | mysql -N Licenses`

    if [ $COUNT -eq 0 ]; then
        REASON="No valid [${SDK_PARTNER_ID}] license found"
	echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
        cp "${stub}" "${FAILDIR}"

        STUB_REJECT_COUNT=$((STUB_REJECT_COUNT+1))
    else

	# attempt to move revoked licenses from Licenses into Revoked
cat << EOF-${REQUEST_ID} | mysql -N Licenses
BEGIN;

INSERT INTO Revokes(terminal_stub,
		    partner_id,
		    request_id, 
		    serial_number,
		    license_key,
		    expire_date,
		    signed_by,
		    order_number,
		    created,
		    created_by,
		    import_request_id,
		    update_count,
		    revoked,
		    revoked_by,
		    revoke_type,
		    revoke_request_id)
    SELECT terminal_stub,
	   partner_id,
	   request_id,
	   serial_number,
	   license_key,
	   expire_date,
	   signed_by,
	   order_number,
	   created,
	   created_by,
	   import_request_id,
	   update_count,
	   NOW(),
	   '${SENDER}',
	   'STUB',
	   '${REQUEST_ID}'
	FROM Licenses
	WHERE terminal_stub = '${license_stub}';

DELETE FROM Licenses WHERE terminal_stub = '${license_stub}';

COMMIT;

EOF-${REQUEST_ID}

	if [ $? -ne 0 ]; then
	    REASON="Database error encountered while revoking license(s) ($?)"
	    echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            cp "${stub}" "${FAILDIR}"

            STUB_REJECT_COUNT=$((STUB_REJECT_COUNT+1))
	else
	    # check if license(s) successfully revoked
	    SQL="select count(*) from Revokes where revoke_request_id='${REQUEST_ID}' and terminal_stub='${license_stub}' and revoke_type='STUB'"
	    COUNT=`echo "${SQL}" | mysql -N Licenses`

	    if [ "$?" -ne 0 -o "$COUNT" -eq 0 ]; then
		REASON="Database error encountered while verifying revoked license(s) ($?)"
		echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
                cp "${stub}" "${FAILDIR}"

                STUB_REJECT_COUNT=$((STUB_REJECT_COUNT+1))
	    else
		echo "TYPE <STUB> FILE <${FILE_NAME}> LICENSE COUNT <${COUNT}>" >> "${REQDIR}/${REQUEST_ID}/revoked.log"
                cp "${stub}" "${SUCCESSDIR}"

                STUB_REVOKE_COUNT=$((STUB_REVOKE_COUNT+1))
	    fi
	fi
    fi
}
REVOKE_STUB=

############################################################################
#
# revoke_sdk_license
#
# revoke license identified by its sdk license file
#
# @args: <sdk license file>
#
############################################################################

revoke_sdk_license() {

    local LICENSE_FILE=$1
    local FILE_NAME=`basename "${LICENSE_FILE}"`

    # read sdk license key into environment
    local LICENSE_KEY=`cat "${LICENSE_FILE}"`

    # check if license key exists
    SQL="select count(*) from Licenses where license_key='${LICENSE_KEY}' and partner_id='${SDK_PARTNER_ID}'"
    COUNT=`echo "${SQL}" | mysql -N Licenses`

    if [ $COUNT -eq 0 ]; then
        REASON="No valid [${SDK_PARTNER_ID}] license found"
	echo "TYPE <SDK LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"

        SDK_REJECT_COUNT=$((SDK_REJECT_COUNT+1))
    elif [ $COUNT -gt 1 ]; then
        REASON="Multiple matching [${SDK_PARTNER_ID}] licenses found"
	echo "TYPE <SDK LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"

        SDK_REJECT_COUNT=$((SDK_REJECT_COUNT+1))
    else
        # retrieve terminal stub
        SQL="select terminal_stub FROM Licenses where license_key='${LICENSE_KEY}' and partner_id='${SDK_PARTNER_ID}'"
        TERMINAL_STUB=`echo "${SQL}" | mysql -N Licenses`

	# attempt to move revoked licenses from Licenses into Revoked
cat << EOF-${REQUEST_ID} | mysql -N Licenses
BEGIN;

INSERT INTO Revokes(terminal_stub,
		    partner_id,
		    request_id,
		    serial_number,
		    license_key,
		    expire_date,
		    signed_by,
		    order_number,
		    created,
		    created_by,
		    import_request_id,
		    update_count,
		    revoked,
		    revoked_by,
		    revoke_type,
		    revoke_request_id)
    SELECT terminal_stub,
	   partner_id,
	   request_id,
	   serial_number,
	   license_key,
	   expire_date,
	   signed_by,
	   order_number,
	   created,
	   created_by,
	   import_request_id,
	   update_count,
	   NOW(),
	   '${SENDER}',
	   'SDK LICENSE',
	   '${REQUEST_ID}'
	FROM Licenses
	WHERE terminal_stub = '${TERMINAL_STUB}';

    DELETE FROM Licenses WHERE terminal_stub = '${TERMINAL_STUB}';

    COMMIT;

EOF-${REQUEST_ID}

	if [ $? -ne 0 ]; then
	    REASON="Database error encountered while revoking license ($?)"
	    echo "TYPE <SDK LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"

            SDK_REJECT_COUNT=$((SDK_REJECT_COUNT+1))
	else
	    # check if license(s) successfully revoked
	    SQL="select count(*) from Revokes where revoke_request_id='${REQUEST_ID}' and terminal_stub='${TERMINAL_STUB}' and revoke_type='SDK LICENSE'"
	    COUNT=`echo "${SQL}" | mysql -N Licenses`

	    if [ "$?" -ne 0 -o "$COUNT" -eq 0 ]; then
		REASON="Database error encountered while verifying revoked license(s) ($?)"
		echo "TYPE <SDK LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"

                SDK_REJECT_COUNT=$((SDK_REJECT_COUNT+1))
	    else
		echo "TYPE <SDK LICENSE> FILE <${FILE_NAME}> LICENSE COUNT <${COUNT}>" >> "${REQDIR}/${REQUEST_ID}/revoked.log"
                SDK_REVOKE_COUNT=$((SDK_REVOKE_COUNT+1))
	    fi
	fi
    fi
}
REVOKE_SDK_LICENSE=

############################################################################
#
# revoke_partner_license
#
# revoke licenses identified in the partner license file
#
# @args: <partner license file>
#
############################################################################

revoke_partner_license() {

    local LICENSE_FILE=$1
    local FILE_NAME=`basename "${LICENSE_FILE}"`

    # read partner licenses from file
    LICENSES=`sed -n '
		# extract partner ID
		/^\[.*\]/, /^signed_key=/ {
		    /^\[.*\]/ {
			s/^\[\(.*\)\]/\1/;h
		    }
		    /^signed_key=/!d
		    /^signed_key=/ {
			s/^signed_key\(.*\)/\1/
			H
			g
			s/^\(.*\)\n\(.*\)$/\1\2/
			p
		    }
		}
		' < "${LICENSE_FILE}"`

    for license in ${LICENSES}; do

	PARTNER_ID=`echo "${license}" | sed -n 's/^\([^=]*\)=.*$/\1/;p'`
	PARTNER_KEY=`echo "${license}" | sed -n 's/^[^=]*=\(.*$\)/\1/;p'`

        # check if license key exists
        SQL="select count(*) from Licenses where license_key='${PARTNER_KEY}' and partner_id='${PARTNER_ID}'"
        COUNT=`echo "${SQL}" | mysql -N Licenses`

        if [ $COUNT -eq 0 ]; then
            REASON="No valid [${PARTNER_ID}] license found"
            echo "TYPE <PARTNER LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            cp "${LICENSE_FILE}" "${FAILDIR}/${FILE_NAME}-${PARTNER_ID}"

            LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))
        elif [ $COUNT -gt 1 ]; then
            REASON="Multiple matching [${PARTNER_ID}] licenses found"
            echo "TYPE <PARTNER LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            cp "${LICENSE_FILE}" "${FAILDIR}/${FILE_NAME}-${PARTNER_ID}"

            LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))
        else

            # attempt to move revoked licenses from Licenses into Revoked
        cat << EOF-${REQUEST_ID} | mysql Licenses
            BEGIN;

            INSERT INTO Revokes(terminal_stub,
                                partner_id,
                                request_id,
                                serial_number,
                                license_key,
                                expire_date,
                                signed_by,
                                order_number,
                                created,
                                created_by,
                                import_request_id,
                                update_count,
                                revoked,
                                revoked_by,
                                revoke_type,
                                revoke_request_id)
                SELECT terminal_stub,
                       partner_id,
                       request_id,
                       serial_number,
                       license_key,
                       expire_date,
                       signed_by,
                       order_number,
                       created,
                       created_by,
                       import_request_id,
                       update_count,
                       NOW(),
                       '${SENDER}',
                       'PARTNER LICENSE',
                       '${REQUEST_ID}'
                    FROM Licenses
                    WHERE terminal_stub = (SELECT terminal_stub FROM Licenses where license_key='${PARTNER_KEY}' and partner_id='${PARTNER_ID}');

            DELETE FROM Licenses WHERE license_key='${PARTNER_KEY}' and partner_id='${PARTNER_ID}';

            COMMIT;

EOF-${REQUEST_ID}

            if [ $? -ne 0 ]; then
                REASON="Database error encountered while revoking license for [${PARTNER_ID}] ($?)"
                echo "TYPE <PARTNER LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
                LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))
                cp "${LICENSE_FILE}" "${FAILDIR}/${FILE_NAME}-${PARTNER_ID}"

            else
                # check if license(s) successfully revoked
                SQL="select count(*) from Revokes where revoke_request_id='${REQUEST_ID}' and license_key='${PARTNER_KEY}' and revoke_type='PARTNER LICENSE'"
                COUNT=`echo "${SQL}" | mysql -N Licenses`

                if [ "$?" -ne 0 -o "$COUNT" -eq 0 ]; then
                    REASON="Database error encountered while verifying revoked license for [${PARTNER_ID}] ($?)"
                    echo "TYPE <PARTNER LICENSE> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
                    cp "${LICENSE_FILE}" "${FAILDIR}/${FILE_NAME}-${PARTNER_ID}"

                    LICENSE_REJECT_COUNT=$((LICENSE_REJECT_COUNT+1))
                else
                    echo "TYPE <PARTNER LICENSE> FILE <${FILE_NAME}> PARTNER <${PARTNER_ID}>" >> "${REQDIR}/${REQUEST_ID}/revoked.log"
                    cp "${LICENSE_FILE}" "${SUCCESSDIR}/${FILE_NAME}-${PARTNER_ID}"

                    LICENSE_REVOKE_COUNT=$((LICENSE_REVOKE_COUNT+1))
                fi
            fi
        fi
    done
}
REVOKE_PARTNER_LICENSE=

############################################################################
#
# revoke_license
#
# revoke license identified by the content of the input file, which may be
# a SDK license file or a partner licens file
#
# @args: <license file>
#
############################################################################

revoke_license() {

    local LICENSE_FILE=$1
    local SIZE=`stat -c %s "${LICENSE_FILE}"`

    # if SIZE = 128, then treat file as SDK license file
    if [ $SIZE -eq 128 ]; then
        revoke_sdk_license "${LICENSE_FILE}"
    else
        revoke_partner_license "${LICENSE_FILE}"
    fi
}
REVOKE_LICENSE=

############################################################################
#
# main
#
############################################################################

############################################################################
# saving request
############################################################################
mkdir -p "${ATTACHDIR}"
mkdir -p "${SUCCESSDIR}"
mkdir -p "${FAILDIR}"
env > "${REQDIR}/${REQUEST_ID}/env"
cat > "${REQDIR}/${REQUEST_ID}/req"

############################################################################
# extract email headers and content
############################################################################
sed -n -e '1,/^$/ { /^[^[:space:]]/ { x; p; }; /^[[:space:]]/ { x; G; s/\n//; h; }; /^$/ { g; p; } }; /^$/,$d' < "${REQDIR}/${REQUEST_ID}/req" > "${REQDIR}/${REQUEST_ID}/req-headers"
REQ_SUBJECT=`grep -E -e '^Subject: ' "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_TO=`grep -E -m 1 -e "^Delivered-To: " "${REQDIR}/${REQUEST_ID}/req-headers" | awk -F" " '{print $2}'`
REQ_DATE=`grep -E -m 1 -e "^Date: " "${REQDIR}/${REQUEST_ID}/req-headers"`
REQ_BODY=`sed '1,/^$/d' "${REQDIR}/${REQUEST_ID}/req"`
REQ_CONTENT_TYPE=`grep -E -m 1 -e "^Content-Type: " "${REQDIR}/${REQUEST_ID}/req-headers"`

############################################################################
# extract multipart boundary
############################################################################
REQ_MULTIPART_BOUNDARY=`echo ${REQ_CONTENT_TYPE} | sed -n '/^Content-Type: multipart\/mixed; / {
s_.*boundary=\(.*\)_\1_
p
}'`

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
    RES_MULTIPART_BOUNDARY=`uuid`
else
    RES_MULTIPART_BOUNDARY="${REQ_MULTIPART_BOUNDARY}"
fi

############################################################################
# extract sender from request
############################################################################
SENDER=`sed '/^Reply-To:/q; /^From:/h; /./d;g;q' "${REQDIR}/${REQUEST_ID}/req" | sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'`
if [ -z "${SENDER}" ]; then
    SENDER=${FROM}
fi

############################################################################
# extract attachments
############################################################################
ripmime -i "${REQDIR}/${REQUEST_ID}/req" -d "${ATTACHDIR}" --no-nameless

############################################################################
# uncompress RAR attachments first
############################################################################
for f in `find ${ATTACHDIR} -name \*.rar`; do

    local FILE_NAME=`basename "$f" .rar`

    # extract files into temp folder
    mkdir "${ATTACHDIR}/${FILE_NAME}"
    unrar x -y "$f" "${ATTACHDIR}/${FILE_NAME}"

done

############################################################################
# begin processing lic attachments
############################################################################
for license in `find ${ATTACHDIR} -name \*.lic`; do

    revoke_license "${license}"

done

############################################################################
# begin processing stub attachments
############################################################################
for stub in `find ${ATTACHDIR} -name \*.txt`; do

    revoke_stub "${stub}"

done

############################################################################
# prepare response
############################################################################
cat > "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
From: ${REPLY_SENDER}
To: ${SENDER}
Subject: ${REPLY_SUBJECT} [ID: ${REQUEST_ID}]
Reply-To: ${REPLY_REPLY_TO}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

We have received and processed your license revoke request.
Your request has been assigned the following ID:

    ${REQUEST_ID}

Results from your request:

EOF-${REQUEST_ID}

if [ -f "${REQDIR}/${REQUEST_ID}/revoked.log" ]; then

    echo "[LICENSE(S) REVOKED]" >> "${REQDIR}/${REQUEST_ID}/response"

cat <<EOF-${REQUEST_ID} | mysql -N Licenses >> "${REQDIR}/${REQUEST_ID}/response"
SELECT r.order_number, t.serial_number, t.model, r.partner_id, r.serial_number, r.signed_by, FROM_UNIXTIME( r.expire_date )
FROM Revokes r, Terminals t
WHERE t.terminal_stub = r.terminal_stub AND r.revoke_request_id = '${REQUEST_ID}'
ORDER BY r.order_number, t.serial_number, r.partner_id, r.serial_number
LIMIT 0 , 300
EOF-${REQUEST_ID}
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"

    echo "[REVOKE LOG]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/revoked.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo "TOTAL: $((STUB_REVOKE_COUNT + SDK_REVOKE_COUNT + LICENSE_IMPORT_COUNT)), STUBS: ${STUB_REVOKE_COUNT}, SDK LICENSES: ${SDK_REVOKE_COUNT}, PARTNER LICENSES: ${LICENSE_REVOKE_COUNT}" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "[REJECTED LOG]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/rejected.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo "TOTAL: $((STUB_REJECT_COUNT + SDK_REJECT_COUNT + LICENSE_REJECT_COUNT)), STUBS: ${STUB_REJECT_COUNT}, SDK LICENSES: ${SDK_REJECT_COUNT}, PARTNER LICENSES: ${LICENSE_REJECT_COUNT}" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ ! -f "${REQDIR}/${REQUEST_ID}/revoked.log" -a ! -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "-- No valid terminal stub or license file found --" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi
echo "Yours Sincerely," >> "${REQDIR}/${REQUEST_ID}/response"
echo "VIVIPOS License Service" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"

############################################################################
# include original email
############################################################################
cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
-------- Original Email --------
From: ${SENDER}
To: ${REQ_TO}
Date: ${REQ_DATE}
${REQ_SUBJECT}

--${RES_MULTIPART_BOUNDARY}
EOF-${REQUEST_ID}

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
echo "${REQ_CONTENT_TYPE}" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
${REQ_BODY}
EOF-${REQUEST_ID}

############################################################################
# email response
############################################################################
${SMTP_CLIENT} -t < "${REQDIR}/${REQUEST_ID}/response" > "${REQDIR}/${REQUEST_ID}/response.log" 2>&1
if [ "$?" -ne 0 ]; then
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.unsent"
else
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.sent"
fi

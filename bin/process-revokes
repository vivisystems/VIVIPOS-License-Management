#!/bin/sh -x

############################################################################
# set up base environment
############################################################################

PATH=/bin:/usr/bin:/usr/local/bin
REQDIR=$1
COUNT=$2
REQUEST_ID="`date +%Y%m%d`-$((COUNT+1))-`date +%H%M`"
IFS='
'

ATTACHDIR="${REQDIR}/${REQUEST_ID}/attachments"
SMTP_CLIENT=msmtp
REPLY_SENDER="VIVIPOS License Service"
REPLY_REPLY_TO="license-service-noreply@vivipos.com.tw"
REPLY_SUBJECT="License revoke request status"

SDK_PARTNER_ID=VIVIPOS_CORE


############################################################################
#
# revoke_stub
#
# revoke license identified by its stub file
#
# @args: <stub file>
#
############################################################################

revoke_stub() {

    local stub=$1
    local FILE_NAME=`basename "$stub"`

    # import stub details into environment
    eval `awk -F"=" '$1 ~ /[A-Za-z0-9_]+/ { print "export " $1 "=\"" $2 "\"";  }' "${stub}"`

    # check if stub exists
    SQL="select count(*) from Licenses where terminal_stub='${license_stub}' and partner_id='${SDK_PARTNER_ID}'"
    COUNT=`echo "$SQL" | mysql -N vivipos`

    if [ $COUNT -eq 0 ]; then
        REASON="No valid [${SDK_PARTNER_ID}] license found"
	echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
    else

	# attempt to move revoked licenses from Licenses into Revoked
cat << EOF-${REQUEST_ID} | mysql vivipos
BEGIN;

INSERT INTO Revokes(terminal_stub,
		    partner_id,
		    request_id, 
		    serial_number,
		    license_key,
		    expire_date,
		    signed_by,
		    order_number,
		    created,
		    created_by,
		    create_request_id,
		    update_count,
		    revoked,
		    revoked_by,
		    revoke_type,
		    revoke_request_id)
    SELECT terminal_stub,
	   partner_id,
	   request_id,
	   serial_number,
	   license_key,
	   expire_date,
	   signed_by,
	   order_number,
	   created,
	   created_by,
	   create_request_id,
	   update_count,
	   NOW(),
	   '${SENDER}',
	   'STUB',
	   '${REQUEST_ID}'
	FROM Licenses
	WHERE terminal_stub = '${license_stub}';

DELETE FROM Licenses WHERE terminal_stub = '${license_stub}';

COMMIT;

EOF-${REQUEST_ID}

	if [ $? -ne 0 ]; then
	    REASON="Database error encountered while revoking license ($?)"
	    echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
	else
	    # check if license(s) successfully revoked
	    SQL="select count(*) from Revokes where terminal_stub='${license_stub}' and revoke_request_id='${REQUEST_ID}' and revoke_type='STUB'"
	    COUNT=`echo "$SQL" | mysql -N vivipos`

	    if [ "$?" -ne 0 -o "$COUNT" -eq 0 ]; then
		REASON="Database error encountered while verifying revoked license ($?)"
		echo "TYPE <STUB> FILE <${FILE_NAME}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
	    else
		echo "TYPE <STUB> FILE <${FILE_NAME}> COUNT <${COUNT}>" >> "${REQDIR}/${REQUEST_ID}/revoked.log"
	    fi
	fi
    fi
}

############################################################################
#
# revoke_sdk_key
#
# revoke license identified by its sdk key
#
# @args: <stub file>
#
############################################################################

############################################################################
#
# process_license
#
# process partner license file
#
# @args: <partner license file>
#
############################################################################

process_license() {

    local LICENSE_FILE=$1

    LICENSES=`sed -n '
		# extract partner ID
		/^\[.*\]/, /^signed_key=/ {
		    /^\[.*\]/ {
			s/^\[\(.*\)\]/\1/;h
		    }
		    /^signed_key=/!d
		    /^signed_key=/ {
			s/^signed_key\(.*\)/\1/
			H
			g
			s/^\(.*\)\n\(.*\)$/\1\2/
			p
		    }
		}
		' < "${LICENSE_FILE}"`

    for license in ${LICENSES}; do
	PARTNER_ID=`echo "${license}" | sed -n 's/^\([^=]*\)=.*$/\1/;p'`
	PARTNER_KEY=`echo "${license}" | sed -n 's/^[^=]*=\(.*$\)/\1/;p'`

	# log output
	echo "${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/license-${HARDWARE_SERIAL}-${PARTNER_ID}"

	# are data valid?
	validate_license "${PARTNER_ID}" "${PARTNER_KEY}"
	if [ "$?" -ne 0 ]; then
	    echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
	    echo "[${PARTNER_ID}]" >> "${REQDIR}/${REQUEST_ID}/bad-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    echo "signed_key=${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/bad-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    echo >> "${REQDIR}/${REQUEST_ID}/bad-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	else

	    # extract expire date
	    EXPIRE_DATE=`${PARTNER_TOOL} -c "${LICENSE_FILE}" -l | grep -E -e "^${PARTNER_ID}[[:space:]]" | awk -F" " '{print $2}'`

	    # attempt to insert into DB
	    store_license "${license_stub}" "${ORDER_NO}" "${PARTNER_ID}" "${PARTNER_KEY}" "${EXPIRE_DATE}"
	    if [ "$?" -ne 0 ]; then
		echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
		echo "[${PARTNER_ID}]" >> "${REQDIR}/${REQUEST_ID}/failed-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo "signed_key=${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/failed-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
		echo >> "${REQDIR}/${REQUEST_ID}/failed-license-${HARDWARE_SERIAL}-${PARTNER_ID}"
	    else
		echo "ORDER <${ORDER_NO}> SN <${HARDWARE_SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}>" >> "${REQDIR}/${REQUEST_ID}/imported.log"
	    fi
	fi
    done
}

############################################################################
#
# main
#
############################################################################

############################################################################
# saving request
############################################################################
mkdir -p "${ATTACHDIR}"
env > "${REQDIR}/${REQUEST_ID}/env"
cat > "${REQDIR}/${REQUEST_ID}/req"

############################################################################
# extract email headers and content
############################################################################
REQ_SUBJECT=`grep -E -m 1 -e "^Subject: " "${REQDIR}/${REQUEST_ID}/req"`
REQ_TO=`grep -E -m 1 -e "^Delivered-To: " "${REQDIR}/${REQUEST_ID}/req" | awk -F" " '{print $2}'`
REQ_DATE=`grep -E -m 1 -e "^Date: " "${REQDIR}/${REQUEST_ID}/req"`
REQ_BODY=`sed '1,/^$/d' "${REQDIR}/${REQUEST_ID}/req"`
REQ_CONTENT_TYPE=`grep -E -m 1 -e "^Content-Type: " "${REQDIR}/${REQUEST_ID}/req"`

############################################################################
# extract multipart boundary
############################################################################
REQ_MULTIPART_BOUNDARY=`echo ${REQ_CONTENT_TYPE} | sed -n '/^Content-Type: multipart\/mixed; / {
s_.*boundary=\(.*\)_\1_
p
}'`

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
    RES_MULTIPART_BOUNDARY=`uuid`
else
    RES_MULTIPART_BOUNDARY="${REQ_MULTIPART_BOUNDARY}"
fi

############################################################################
# extract sender from request
############################################################################
SENDER=`sed '/^Reply-To:/q; /^From:/h; /./d;g;q' "${REQDIR}/${REQUEST_ID}/req" | sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'`
if [ -z "${SENDER}" ]; then
    SENDER=${FROM}
fi

############################################################################
# extract attachments
############################################################################
ripmime -i "${REQDIR}/${REQUEST_ID}/req" -d "${ATTACHDIR}" --no-nameless

############################################################################
# uncompress RAR attachments first
############################################################################
for f in `find ${ATTACHDIR} -name \*.rar`; do

    local FILE_NAME=`basename "$f" .rar`

    # extract files into temp folder
    mkdir "${ATTACHDIR}/${FILE_NAME}"
    unrar x -y "$f" "${ATTACHDIR}/${FILE_NAME}"

done

############################################################################
# begin processing stub attachments
############################################################################
for stub in `find ${ATTACHDIR} -name \*.txt`; do

    revoke_stub "${stub}"

done

############################################################################
# begin processing lic attachments
############################################################################
for license in `find ${ATTACHDIR} -name \*.lic`; do

    revoke_license "${license}"

done

############################################################################
# prepare response
############################################################################
cat > "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
From: ${REPLY_SENDER}
To: ${SENDER}
Subject: ${REPLY_SUBJECT}
Reply-To: ${REPLY_REPLY_TO}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

We have received and processed your license revoke request.
Your request has been assigned the following ID:

    ${REQUEST_ID}

Results from your request:

EOF-${REQUEST_ID}

if [ -f "${REQDIR}/${REQUEST_ID}/revoked.log" ]; then
    echo "[REVOKED]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/revoked.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "[REJECTED]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/rejected.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ ! -f "${REQDIR}/${REQUEST_ID}/revoked.log" -a ! -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "-- No valid terminal stub or license file found --" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi
echo "Yours Sincerely," >> "${REQDIR}/${REQUEST_ID}/response"
echo "VIVIPOS License Service" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"

############################################################################
# include original email
############################################################################
cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
-------- Original Email --------
From: ${SENDER}
To: ${REQ_TO}
Date: ${REQ_DATE}
${REQ_SUBJECT}

--${RES_MULTIPART_BOUNDARY}
EOF-${REQUEST_ID}

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
echo "${REQ_CONTENT_TYPE}" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
${REQ_BODY}
EOF-${REQUEST_ID}

############################################################################
# email response
############################################################################
${SMTP_CLIENT} -t < "${REQDIR}/${REQUEST_ID}/response" > "${REQDIR}/${REQUEST_ID}/response.smtp" 2>&1
if [ "$?" -ne 0 ]; then
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.unsent"
else
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.sent"
fi

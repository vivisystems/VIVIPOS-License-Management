#!/bin/sh -x

############################################################################
# set up base environment
############################################################################

PATH=/bin:/usr/bin:/usr/local/bin
REQDIR=$1
COUNT=$2
REQUEST_ID="`date +%Y%m%d`-$((COUNT+1))-`date +%H%M`"
IFS='
'

ATTACHDIR="${REQDIR}/${REQUEST_ID}/attachments"
LICENSE_TOOL=/data/vivipos_sdk/DONTRELEASE/getSystemLicense
SMTP_CLIENT=msmtp
REPLY_SENDER="VIVIPOS License Service"
REPLY_REPLY_TO="license-service-noreply@vivipos.com.tw"
REPLY_SUBJECT="License import request status"


############################################################################
#
# validate_stub
#
# validate stub file
#
# @args: <order number> <MB serial number> <stub file> <terminal key>
#
############################################################################

validate_stub()
{
    local ORDER=$1
    local SERIAL=$2
    local STUB=$3
    local KEY=$4

    if [ -z "${ORDER}" ]; then
	REASON="Order number is empty"
	return 1
    else
	local PREFIX=`echo -n ${ORDER} | awk -F"-" '{print $1}'`
	if [ "${PREFIX}" != "B220" -a "${PREFIX}" != "V220" -a "${PREFIX}" != "VM" ]; then
	    REASON="Invalid order number"
	    return 1
	fi
    fi

    if [ "${PREFIX}" = "VM" -a -z "${SERIAL}" ]; then
	REASON="Serial number is empty for non-VM license"
	return 1
    fi

    local STUB_LEN=`echo -n ${STUB} | wc -c`
    if [ ${STUB_LEN} -ne 128 ]; then
	REASON="Terminal stub length is not 128 bytes (${STUB_LEN})"
	return 1
    fi

    KEY_LEN=`echo -n ${KEY} | wc -c`
    if [ ${KEY_LEN} -ne 128 ]; then
	REASON="License key length is not 128 bytes (${KEY_LEN})"
	return 1
    fi

    return 0
}

############################################################################
#
# store_stub
#
# store terminal stub/license in db
#
# @args: <stub file>
#
############################################################################

SDK_PARTNER_ID=VIVIPOS_CORE
store_stub() {

# insert entry into Terminals
cat | mysql vivipos <<EOF-${REQUEST_ID}
BEGIN;

INSERT into Terminals(terminal_stub, serial_number, dallas_key, system_name, vendor_name, mac_address, model, created_by, created, create_request_id)
values ('${license_stub}', '${SERIAL}', '${dallas}', '${system_name}', '${vendor_name}', '${mac_address}', '${MODEL}', '${REQ_TO}', NOW(), '${REQUEST_ID}')
ON DUPLICATE KEY UPDATE model=VALUES(model), serial_number=VALUES(serial_number), created_by=VALUES(created_by), create_request_id='${REQUEST_ID}', update_count=update_count+1;

INSERT into Licenses(terminal_stub, partner_id, license_key, serial_number, order_number, signed_by, created_by, created, create_request_id)
values ('${license_stub}', '${SDK_PARTNER_ID}', '${KEY}', '${LICENSE_SERIAL_NUMBER}', '${ORDER_NO}', '${SENDER}', '${REQ_TO}', NOW(), '${REQUEST_ID}')
ON DUPLICATE KEY UPDATE license_key=VALUES(license_key), serial_number=VALUES(serial_number), signed_by=VALUES(signed_by), created_by=VALUES(created_by), create_request_id='${REQUEST_ID}', update_count=update_count+1;

COMMIT;
EOF-${REQUEST_ID}

    if [ $? -ne 0 ]; then
        REASON='Failed to store stub into database ($?)'
        return 1
    fi
}

############################################################################
#
# process_stub
#
# process a stub file
#
# @args: <stub file>
#
############################################################################

process_stub() {

    local stub=$1

    # for each stub file, file name is the serial number
    SERIAL=`basename "${stub}" .txt`

    # import stub details into environment
    eval `awk -F"=" '$1 ~ /[A-Za-z0-9_]+/ { print "export " $1 "=\"" $2 "\"";  }' "${stub}"`
    LICENSE_SERIAL_NUMBER=${license_key_serial:-LEGACY}

    # generate license key
    KEY=`${LICENSE_TOOL} -f "${stub}"`

    # log output
    cat > "${REQDIR}/${REQUEST_ID}/stub-${SERIAL}" <<EOF-${REQUEST_ID}
ORDER_NO=${ORDER_NO}
SERIAL_NUMBER=${SERIAL}
DALLAS_KEY=${dallas}
SYSTEM_NAME=${system_name}
VENDOR_NAME=${vendor_name}
MAC_ADDRESS=${mac_address}
TERMINAL_STUB=${license_stub}
SDK_LICENSE_KEY=${KEY}
LICENSE_SERIAL_NUMBER=${LICENSE_SERIAL_NUMBER}
EOF-${REQUEST_ID}

    # are data valid?
    validate_stub "${ORDER_NO}" "${SERIAL}" "${license_stub}" "${KEY}"
    if [ "$?" -ne 0 ]; then
        echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <STUB> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
        mv "${REQDIR}/${REQUEST_ID}/stub-${SERIAL}" "${REQDIR}/${REQUEST_ID}/bad-stub-${SERIAL}"
        return 1
    else

        # attempt to insert into DB
        store_stub
        if [ "$?" -ne 0 ]; then
            echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <STUB> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            mv "${REQDIR}/${REQUEST_ID}/stub-${SERIAL}" "${REQDIR}/${REQUEST_ID}/failed-stub-${SERIAL}"
            return 1
        else
            echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <STUB>" >> "${REQDIR}/${REQUEST_ID}/imported.log"
        fi

    fi
}

############################################################################
#
# validate_licnse
#
# validate partner license file
#
# @args: <partner id> <partner key>
#
############################################################################

validate_license() {
    local PARTNER_ID=$1
    local PARTNER_KEY=$2

    if [ -z "${PARTNER_ID}" ]; then
	REASON="Partner ID is empty"
	return 1
    fi

    if [ -z "${PARTNER_KEY}" ]; then
	REASON="Partner key is empty"
	return 1
    fi

    local KEY_LEN=`echo -n "${PARTNER_KEY}" | wc -c`
    if [ ${KEY_LEN} -ne 77 ]; then
	REASON="License key length is not 77 bytes (${KEY_LEN})"
	return 1
    fi

    return 0
}

############################################################################
#
# store_license
#
# store partner license in db
#
# @args: <terminal stub> <order number> <partner id> <partner key>
#
############################################################################

store_license() {
    local TERMINAL_STUB=$1
    local ORDER_NO=$2
    local PARTNER_ID=$3
    local PARTNER_KEY=$4

    # check if partner ID exists
    SQL="select count(*) from Partners where partner_id='${PARTNER_ID}'"
    COUNT=`echo "$SQL" | mysql -N vivipos`

    if [ $? -ne 0 ]; then
        REASON="Failed to retrieve partner information"
        return 1
    else
        if [ "$COUNT" = "1" ]; then

# insert entry into Licenses
cat <<EOF-${REQUEST_ID} | mysql vivipos
INSERT into Licenses(terminal_stub, partner_id, license_key, order_number, signed_by, created_by, created, create_request_id)
values ('${TERMINAL_STUB}', '${PARTNER_ID}', '${PARTNER_KEY}', '${ORDER_NO}', '${SENDER}', '${REQ_TO}', NOW(), '${REQUEST_ID}')
ON DUPLICATE KEY UPDATE license_key=VALUES(license_key), signed_by=VALUES(signed_by), created_by=VALUES(created_by), create_request_id='${REQUEST_ID}', update_count=update_count+1;
EOF-${REQUEST_ID}

            if [ $? -ne 0 ]; then
                REASON='Failed to store stub into database ($?)'
                return 1
            fi

        elif [ "$COUNT" = "0" ]; then
            REASON="Partner ID does not exist in database"
            return 1
        else
            REASON="Multiple entries with the same partner ID found"
            return 1
        fi
    fi
}

############################################################################
#
# process_license
#
# process partner license file
#
# @args: <partner license file>
#
############################################################################

process_license() {

    local LICENSE_FILE=$1

    LICENSES=`sed -n '
		# extract partner ID
		/^\[.*\]/, /^signed_key=/ {
		    /^\[.*\]/ {
			s/^\[\(.*\)\]/\1/;h
		    }
		    /^signed_key=/!d
		    /^signed_key=/ {
			s/^signed_key\(.*\)/\1/
			H
			g
			s/^\(.*\)\n\(.*\)$/\1\2/
			p
		    }
		}
		' < "${LICENSE_FILE}"`

    for license in ${LICENSES}; do
	PARTNER_ID=`echo "${license}" | sed -n 's/^\([^=]*\)=.*$/\1/;p'`
	PARTNER_KEY=`echo "${license}" | sed -n 's/^[^=]*=\(.*$\)/\1/;p'`

	# log output
	echo "${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/license-${SERIAL}-${PARTNER_ID}"

	# are data valid?
	validate_license "${PARTNER_ID}" "${PARTNER_KEY}"
	if [ "$?" -ne 0 ]; then
	    echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
	    echo "[${PARTNER_ID}]" >> "${REQDIR}/${REQUEST_ID}/bad-license-${SERIAL}-${PARTNER_ID}"
	    echo "signed_key=${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/bad-license-${SERIAL}-${PARTNER_ID}"
	    echo >> "${REQDIR}/${REQUEST_ID}/bad-license-${SERIAL}-${PARTNER_ID}"
	else

	    # attempt to insert into DB
	    store_license "${license_stub}" "${ORDER_NO}" "${PARTNER_ID}" "${PARTNER_KEY}"
	    if [ "$?" -ne 0 ]; then
		echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}> REASON <${REASON}>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
		echo "[${PARTNER_ID}]" >> "${REQDIR}/${REQUEST_ID}/failed-license-${SERIAL}-${PARTNER_ID}"
		echo "signed_key=${PARTNER_KEY}" >> "${REQDIR}/${REQUEST_ID}/failed-license-${SERIAL}-${PARTNER_ID}"
		echo >> "${REQDIR}/${REQUEST_ID}/failed-license-${SERIAL}-${PARTNER_ID}"
	    else
		echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <PARTNER> PARTNER <${PARTNER_ID}>" >> "${REQDIR}/${REQUEST_ID}/imported.log"
	    fi
	fi
    done
}

############################################################################
#
# main
#
############################################################################

############################################################################
# saving request
############################################################################
mkdir -p "${ATTACHDIR}"
env > "${REQDIR}/${REQUEST_ID}/env"
cat > "${REQDIR}/${REQUEST_ID}/req"

############################################################################
# extract SUBJECT
############################################################################
REQ_SUBJECT=`grep -E -m 1 -e "^Subject: " "${REQDIR}/${REQUEST_ID}/req"`
REQ_TO=`grep -E -m 1 -e "^Delivered-To: " "${REQDIR}/${REQUEST_ID}/req" | awk -F" " '{print $2}'`
REQ_DATE=`grep -E -m 1 -e "^Date: " "${REQDIR}/${REQUEST_ID}/req"`
REQ_BODY=`sed '1,/^$/d' "${REQDIR}/${REQUEST_ID}/req"`
REQ_CONTENT_TYPE=`grep -E -m 1 -e "^Content-Type: " "${REQDIR}/${REQUEST_ID}/req"`

############################################################################
# extract multipart boundary
############################################################################
REQ_MULTIPART_BOUNDARY=`echo ${REQ_CONTENT_TYPE} | sed -n '/^Content-Type: multipart\/mixed; / {
s_.*boundary=\(.*\)_\1_
p
}'`

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
    RES_MULTIPART_BOUNDARY=`uuid`
else
    RES_MULTIPART_BOUNDARY="${REQ_MULTIPART_BOUNDARY}"
fi

############################################################################
# extract sender from request
############################################################################
SENDER=`sed '/^Reply-To:/q; /^From:/h; /./d;g;q' "${REQDIR}/${REQUEST_ID}/req" | sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'`
if [ -z "${SENDER}" ]; then
    SENDER=${FROM}
fi

############################################################################
# extract attachments
############################################################################
ripmime -i "${REQDIR}/${REQUEST_ID}/req" -d "${ATTACHDIR}" --no-nameless

############################################################################
# begin processing RAR attachments
############################################################################
for f in `find ${ATTACHDIR} -name \*.rar`; do

    # for RAR, file name is <order number>[ model]
    FILE_NAME=`basename "$f" .rar`
    ORDER_NO=`echo "${FILE_NAME}" | awk '{print $1}' | sed 's/\([^-]*-[^-]*\)-.*/\1/'`
    MODEL=`echo "${FILE_NAME}" | awk '{print $2}' | sed 's/\([^#]*\)#.*-.*/\1/'`

    # extract stub files into temp folder
    mkdir "${ATTACHDIR}/${ORDER_NO}"
    unrar x -y "$f" "${ATTACHDIR}/${ORDER_NO}"

    for stub in `find "${ATTACHDIR}/${ORDER_NO}" -name \*.txt`; do
        process_stub "${stub}"

        STUB_RESULT=$?

        # processing corresponding LIC attachments (partner licenses)
        LICENSE_FILE=`echo "${stub}" | sed 's/.txt$/.lic/'`
        if [ -f "${LICENSE_FILE}" ]; then
            if [ ${STUB_RESULT} -ne 0 ]; then
                echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <PARTNER> REASON <Processing of terminal stub failed>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
            else
                process_license "${LICENSE_FILE}"
            fi
        fi
    done

done

############################################################################
# begin processing TXT attachments (
############################################################################
for stub in `find ${ATTACHDIR} -maxdepth 1 -name \*.txt`; do

    # for TXT, order number should be in the subject line
    SUBJECT_LINE=`echo "${REQ_SUBJECT}" | grep -E -m 1 -e "^Subject: [ \t]*(B220|V220|VM)-[alnum]*"`
    ORDER_NO=`echo "${SUBJECT_LINE}" | awk '{print $2}' | sed 's/\([^-]*-[^-]*\)-.*/\1/'`
    MODEL=`echo "${SUBJECT_LINE}" | awk '{print $3}' | sed 's/\([^#]*\)#.*-.*/\1/'`

    process_stub "${stub}"

    STUB_RESULT=$?

    # processing corresponding LIC attachments (partner licenses)
    LICENSE_FILE=`echo "${stub}" | sed 's/.txt$/.lic/'`
    if [ -f "${LICENSE_FILE}" ]; then
        if [ ${STUB_RESULT} -ne 0 ]; then
            echo "ORDER <${ORDER_NO}> FILE <${SERIAL}> TYPE <PARTNER> REASON <Processing of terminal stub failed>" >> "${REQDIR}/${REQUEST_ID}/rejected.log"
        else
            process_license "${LICENSE_FILE}"
        fi
    fi
done


############################################################################
# prepare response
############################################################################
cat > "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
From: ${REPLY_SENDER}
To: ${SENDER}
Subject: ${REPLY_SUBJECT}
Reply-To: ${REPLY_REPLY_TO}
Content-Type: multipart/mixed; boundary=${RES_MULTIPART_BOUNDARY}

--${RES_MULTIPART_BOUNDARY}
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

We have received and processed your license import request.
Your request has been assigned the following ID:

    ${REQUEST_ID}

Results from your request:

EOF-${REQUEST_ID}

if [ -f "${REQDIR}/${REQUEST_ID}/imported.log" ]; then
    echo "[IMPORTED]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/imported.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "[REJECTED]" >> "${REQDIR}/${REQUEST_ID}/response"
    cat "${REQDIR}/${REQUEST_ID}/rejected.log" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

if [ ! -f "${REQDIR}/${REQUEST_ID}/imported.log" -a ! -f "${REQDIR}/${REQUEST_ID}/rejected.log" ]; then
    echo "-- No valid license file found --" >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
    echo >> "${REQDIR}/${REQUEST_ID}/response"
fi
echo "Yours Sincerely," >> "${REQDIR}/${REQUEST_ID}/response"
echo "VIVIPOS License Service" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"

############################################################################
# include original email
############################################################################
cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
-------- Original Email --------
From: ${SENDER}
To: ${REQ_TO}
Date: ${REQ_DATE}
${REQ_SUBJECT}

--${RES_MULTIPART_BOUNDARY}
EOF-${REQUEST_ID}

if [ -z "${REQ_MULTIPART_BOUNDARY}" ]; then
echo "${REQ_CONTENT_TYPE}" >> "${REQDIR}/${REQUEST_ID}/response"
echo >> "${REQDIR}/${REQUEST_ID}/response"
fi

cat >> "${REQDIR}/${REQUEST_ID}/response" <<EOF-${REQUEST_ID}
${REQ_BODY}
EOF-${REQUEST_ID}

############################################################################
# email response
############################################################################
#${SMTP_CLIENT} -t < "${REQDIR}/${REQUEST_ID}/response" > "${REQDIR}/${REQUEST_ID}/response.smtp" 2>&1
:
if [ "$?" -ne 0 ]; then
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.unsent"
else
    mv "${REQDIR}/${REQUEST_ID}/response" "${REQDIR}/${REQUEST_ID}/response.sent"
fi
